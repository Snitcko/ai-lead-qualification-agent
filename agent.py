import streamlit as st
from openai import OpenAI
import json
import time
from typing import Optional, Dict, List, Any, Tuple
from config import Message, QualChecklist, AVAILABLE_MODELS, SYSTEM_PROMPT_TEMPLATE
from rag import (
    setup_pinecone,
    chunk_text,
    create_embeddings,
    upload_to_pinecone,
    get_relevant_context
)

def initialize_session_state() -> None:
    """Initialize all necessary session state variables."""
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "assistant", "content": "Hello! How can I help you with your property search today?"}
        ]
    
    if "qual_checklist" not in st.session_state:
        st.session_state.qual_checklist = {
            "checklist": {},
            "last_update": time.time()
        }
        
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if "selected_model" not in st.session_state:
        st.session_state.selected_model = AVAILABLE_MODELS[0]
        
    if "system_role" not in st.session_state:
        st.session_state.system_role = "You are an AI assistant that helps qualify real estate leads."
        
    if "knowledge_base_loaded" not in st.session_state:
        st.session_state.knowledge_base_loaded = False

def create_checklist_from_text(goals_text: str, openai_api_key: str) -> Dict[str, Optional[str]]:
    """Convert text goals into a structured checklist."""
    client = OpenAI(api_key=openai_api_key)
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user",
                "content": f"""
                Convert these qualification goals into a simple JSON structure where all values are null:
                {goals_text}
                
                Example format:
                {{
                    "budget": null,
                    "timeline": null
                }}
                """
            }]
        )
        return json.loads(response.choices[0].message.content)
    except Exception as e:
        st.error(f"Error creating checklist: {e}")
        return {}
    
    
def process_message(
    messages: List[Message],
    checklist: QualChecklist,
    openai_api_key: str,
    model: str,
    system_role: str,
    context: str = ""
) -> Tuple[Optional[str], Dict[str, Optional[str]]]:
    """Process message and update checklist."""
    client = OpenAI(api_key=openai_api_key)
    
    # Format complete system prompt
    formatted_prompt = SYSTEM_PROMPT_TEMPLATE.format(
        system_role=system_role,
        goals_list=list(checklist["checklist"].keys()),
        current_checklist=checklist["checklist"],
        context=context if context else ""
    )

    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": formatted_prompt},
                *messages
            ],
            response_format={"type": "json_object"}
        )
        
        try:
            result = json.loads(response.choices[0].message.content)
            if "response" in result and "checklist" in result:
                # Filter checklist to only include our goals
                filtered_checklist = {
                    k: result["checklist"].get(k, None) 
                    for k in checklist["checklist"].keys()
                }
                return result["response"], filtered_checklist
            else:
                return response.choices[0].message.content, checklist["checklist"]
        except json.JSONDecodeError:
            return response.choices[0].message.content, checklist["checklist"]
            
    except Exception as e:
        st.error(f"Error processing message: {e}")
        return None, checklist["checklist"]



# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def create_streamlit_interface():
    """Create the Streamlit user interface."""
    st.title("ü§ñ üí¨ AI Real Estate Lead Qualification Agent")
    st.caption("üöÄ Powered by OpenAI & Pinecone")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        # API Keys
        openai_api_key = st.text_input(
            "OpenAI API Key", 
            key="openai_api_key", 
            type="password"
            )
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞
        "[Get an OpenAI API key](https://platform.openai.com/account/api-keys)" 
        # Model Selection
        selected_model = st.selectbox(
            "Select Model",
            AVAILABLE_MODELS,
            index=0, # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å
            key="selected_model" 
            )
        # Agent Role
        system_role = st.text_area(
            "Agent Role Description",
            value="You are an AI assistant that helps qualify real estate leads.",
            height=100,
            key="system_role"
            )
           
        pinecone_api_key = st.text_input(
            "Pinecone API Key", 
            key="pinecone_api_key", 
            type="password") # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞
        "[Get an Pinecone API Key](https://app.pinecone.io/organizations/-/keys)"
        
        # Knowledge Base Upload
        knowledge_file = st.file_uploader(
            "Upload Knowledge Base",
            type="txt",
            help="Upload a TXT file with your knowledge base"
        )
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π –∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        if knowledge_file and not st.session_state.knowledge_base_loaded:
            if not st.session_state.get("pinecone_api_key"):
                st.error("Please add your Pinecone API key first to upload knowledge base.")
            else:
                text_content = knowledge_file.getvalue().decode()
                
                with st.spinner("Processing and uploading knowledge base..."):
                    chunks = chunk_text(text_content)
                    openai_client = OpenAI(api_key=st.session_state.openai_api_key)
                    embeddings = create_embeddings(chunks, openai_client)
                    index = setup_pinecone(st.session_state.pinecone_api_key)
                    
                    if index and upload_to_pinecone(index, chunks, embeddings):
                        st.session_state.knowledge_base_loaded = True
                        st.success("Knowledge base uploaded successfully!")
        
        
        
        
        
        # –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π
        st.subheader("Qualification Goals")
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
        AVAILABLE_GOALS = [
            "Budget",
            "Timeline",
            "Location Preference",
            "Property Type",
            "Number of Bedrooms",
            "Investment or Living",
            "Contact Phone",
            "Email Address",
            "Preferred Viewing Time"
        ]
        
        # –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–π
        selected_goals = st.multiselect(
            "Select qualification goals",
            AVAILABLE_GOALS,
            default=["Email Address", "Budget"],
            key="selected_goals"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫–ª–∏—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
        if selected_goals:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
            current_goals = set(st.session_state.qual_checklist["checklist"].keys())
            selected_goals_set = set(selected_goals)
    
            if current_goals != selected_goals_set:
                st.session_state.qual_checklist = {
                    "checklist": {goal: None for goal in selected_goals},
                    "last_update": time.time()
                    }

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å–µ–≥–¥–∞
        if "qual_checklist" in st.session_state:
            st.subheader("Qualification Status")
            st.json(st.session_state.qual_checklist["checklist"])
            
        
        
        
def main():
    """Main application function."""
    initialize_session_state()
    create_streamlit_interface()
    
    # Display message history
    for msg in st.session_state.messages:
        st.chat_message(msg["role"]).write(msg["content"])
    
    # Handle user input
    if prompt := st.chat_input("Type your message here..."):
        if not st.session_state.openai_api_key:
            st.info("Please add your OpenAI API key to continue.")
            st.stop()
        
        # Add user message
        st.session_state.messages.append({"role": "user", "content": prompt})
        st.chat_message("user").write(prompt)
        
        # Get context if Pinecone is set up
        context = ""
        if (st.session_state.get("pinecone_api_key") and 
            st.session_state.get("knowledge_base_loaded")):
            with st.spinner("Searching relevant information..."):
                index = setup_pinecone(st.session_state.pinecone_api_key)
                if index:
                    context = get_relevant_context(
                        prompt,
                        index,
                        OpenAI(api_key=st.session_state.openai_api_key)
                        )
        
        # Process message
        with st.spinner("Thinking..."):
            response, updated_checklist = process_message(
                st.session_state.messages,
                st.session_state.qual_checklist,
                st.session_state.openai_api_key,
                st.session_state.selected_model,
                st.session_state.system_role,
                context
            )
        
            if response:
                # Update checklist and add assistant's response
                st.session_state.qual_checklist["checklist"] = updated_checklist
                st.session_state.qual_checklist["last_update"] = time.time()
            
                st.session_state.messages.append({"role": "assistant", "content": response})
                st.chat_message("assistant").write(response)

                st.rerun()

if __name__ == "__main__":
    main()
        
#         # –î–æ–±–∞–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
#         st.divider() # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
#         st.subheader("Qualification Status")
#     #     #st.json(st.session_state.qualification_status) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ



#     # # –∏—Å–ø–æ–ª—å–∑—É–µ–º session_state –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
#     if "messages" not in st.session_state:
#         st.session_state["messages"] = [
#             {"role": "assistant", "content": "How can I help you?"}
#             ]
#     # if "qualification_status" not in st.session_state:
#     #     st.session_state["qualification_status"] = {
#     #         "status": "pending",
#     #         "message": {},
#     #     }

#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–°–æ–∑–¥–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–∏–ª—è–º–∏)
#     for msg in st.session_state.messages:
#         st.chat_message(msg["role"]).write(msg["content"])
        
#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     # walrus –æ–ø–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
#     if prompt := st.chat_input("Say something"): # walrus –æ–ø–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
#         if not openai_api_key:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
#             st.info("Please add your OpenAI API key to continue.")
#             st.stop()
#         # # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
#         # st.write("Debug - Current prompt:", prompt)
#         # st.write("Debug - Current messages:", st.session_state.messages)

#         # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
#         st.session_state.messages.append({"role": "user", "content": prompt})
#         st.chat_message("user").write(prompt)


# # AI
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI
# def get_openai_response(messages: List[Dict], openai_api_key: str, model: str) -> str:
#     client = OpenAI(api_key=openai_api_key) # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º API –∫–ª—é—á–æ–º
#     try:
#         # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API OpenAI –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
#         response = client.chat.completions.create(
#             model=model,
#             messages=[
#                 {"role": "system", "content": SYSTEM_MESSAGE},
#                 *messages # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
#                 ]
#             )
#         return response.choices[0].message.content # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
#     except Exception as e: # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#         st.error(f"An error occurred: {e}")
#         return None

# # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
# with st.spinner("Thinking..."):
#     response = get_openai_response(
#         st.session_state.messages, 
#         openai_api_key, 
#         selected_model
#         )       
# # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
# if response:
#     st.session_state.messages.append({"role": "assistant", "content": response})
#     st.chat_message("assistant").write(response)
#     #st.session_state.qualification_status["status"] = "complete" # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ (todo: –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        

